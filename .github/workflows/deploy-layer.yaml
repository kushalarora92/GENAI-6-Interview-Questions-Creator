name: deploy-lambda-layer

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'requirements.txt'

env:
  LAYER_ZIP_FILE: ai6-interview-questions-layer.zip
  PYTHON_VERSION: '3.9'
  LAYER_NAME: ai6-interview-questions-layer
  UTILS_LAYER_NAME: ai6-interview-utils-layer

jobs:
  deploy-layer:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Create layer package
        run: |
          # Create directory structure required for Lambda layers
          mkdir -p layer/python
          
          # Create requirements file for layer
          cat > layer/requirements.txt << EOF
          openai==0.28.0
          tiktoken==0.9.0
          faiss-cpu==1.10.0
          EOF
          
          # Install dependencies into the python directory
          pip install -r layer/requirements.txt --target layer/python
          
          # Remove unnecessary files to reduce size
          cd layer/python
          find . -type d -name "__pycache__" -exec rm -rf {} +
          find . -type d -name "*.dist-info" -exec rm -rf {} +
          find . -type d -name "tests" -exec rm -rf {} +
          find . -type d -name "test" -exec rm -rf {} +
          find . -type f -name "*.pyc" -delete
          find . -type f -name "*.pyo" -delete
          find . -type f -name "*.pyd" -delete
          
          # Remove specific large directories we don't need
          rm -rf numpy/tests
          rm -rf numpy/doc
          rm -rf langchain/tests
          rm -rf langchain_community/tests
          rm -rf faiss/tests
          rm -rf sqlalchemy/testing
          rm -rf sqlalchemy/test
          rm -rf yaml/tests
          rm -rf yaml/examples
          # Remove more unnecessary files
          find . -type f -name "*.c" -delete
          find . -type f -name "*.h" -delete
          find . -type f -name "*.hpp" -delete
          find . -type f -name "*.txt" -delete
          find . -type f -name "*.md" -delete
          find . -type f -name "README*" -delete
          find . -type f -name "LICENSE*" -delete
          find . -type f -name "CHANGELOG*" -delete
          
          # Print size information
          echo "Layer package sizes:"
          du -h -d 1 .
          total_size=$(du -s . | cut -f1)
          echo "Total size in KB: $total_size"
          cd ../..

      - name: Create layer zip
        run: |
          cd layer
          zip -r ../${{ env.LAYER_ZIP_FILE }} python/
          cd ..
          echo "Layer zip size:"
          ls -lh ${{ env.LAYER_ZIP_FILE }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_SA_ROLE_ARN }}

      - name: Push layer to S3
        run: |
          aws s3 cp ${{ env.LAYER_ZIP_FILE }} \
            s3://${{ vars.AWS_S3_BUCKET }}/${{ env.LAYER_ZIP_FILE }} \
            --region ${{ vars.AWS_REGION }}

      - name: Create/Update Lambda Layer
        run: |
          # Create new layer version
          LAYER_VERSION=$(aws lambda publish-layer-version \
            --layer-name ${{ env.LAYER_NAME }} \
            --description "Dependencies for AI Interview Questions Creator" \
            --content S3Bucket=${{ vars.AWS_S3_BUCKET }},S3Key=${{ env.LAYER_ZIP_FILE }} \
            --compatible-runtimes python3.9 \
            --region ${{ vars.AWS_REGION }} \
            --query 'Version' \
            --output text)
          
          echo "Created layer version: $LAYER_VERSION"
          
          # Get AWS Account ID
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          
          echo "Using AWS Account ID: $AWS_ACCOUNT_ID"
          
          # Get the utils layer ARN
          UTILS_LAYER_ARN="arn:aws:lambda:${{ vars.AWS_REGION }}:${AWS_ACCOUNT_ID}:layer:${{ env.UTILS_LAYER_NAME }}:$(aws lambda list-layer-versions --layer-name ${UTILS_LAYER_NAME} --query 'LayerVersions[0].Version' --output text)"
          
          # Create ML layer ARN
          ML_LAYER_ARN="arn:aws:lambda:${{ vars.AWS_REGION }}:${AWS_ACCOUNT_ID}:layer:${{ env.LAYER_NAME }}:$LAYER_VERSION"
          
          # Update Lambda function to use both layers
          aws lambda update-function-configuration \
            --function-name ${{ vars.AWS_LAMBDA_FUNCTION }} \
            --layers "$ML_LAYER_ARN" "$UTILS_LAYER_ARN" \
            --region ${{ vars.AWS_REGION }}
