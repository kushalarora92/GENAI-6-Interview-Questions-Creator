name: deployment

on:
  workflow_dispatch:

env:
  ZIP_FILE_NAME: ai6-interview-questions-creator-deployment.zip
  PYTHON_VERSION: '3.9'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Add caching for pip
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      # Validate required variables
      - name: Validate AWS variables
        run: |
          if [ -z "${{ vars.AWS_REGION }}" ] || [ -z "${{ vars.AWS_SA_ROLE_ARN }}" ] || [ -z "${{ vars.AWS_S3_BUCKET }}" ] || [ -z "${{ vars.AWS_LAMBDA_FUNCTION }}" ]; then
            echo "Required AWS variables are not set"
            exit 1
          fi

      - name: Create deployment package
        run: |
          mkdir -p deployment/package
          
          # Create a minimal requirements file for Lambda
          cat > deployment/lambda-requirements.txt << EOF
          fastapi==0.115.8
          uvicorn==0.34.0
          jinja2==3.1.5
          python-multipart==0.0.20
          aws-wsgi==0.2.7
          aiofiles==24.1.0
          EOF
          
          # Clear pip cache first
          pip cache purge
          
          # Install minimal dependencies with --no-cache-dir
          pip install --no-cache-dir -r deployment/lambda-requirements.txt --target deployment/package
          
          # Install the package itself with --no-cache-dir
          pip install --no-cache-dir . --target deployment/package
          
          # Copy only necessary files
          cp -r templates deployment/package/
          cp app.py deployment/package/
          
          # Remove unnecessary files to reduce size
          cd deployment/package
          find . -type d -name "__pycache__" -exec rm -rf {} +
          find . -type d -name "*.dist-info" -exec rm -rf {} +
          find . -type d -name "*.egg-info" -exec rm -rf {} +
          find . -type f -name "*.pyc" -delete
          find . -type f -name "*.pyo" -delete
          find . -type f -name "*.pyd" -delete
          find . -type d -name "tests" -exec rm -rf {} +
          find . -type d -name "test" -exec rm -rf {} +
          
          # Remove more unnecessary files
          find . -type f -name "*.c" -delete
          find . -type f -name "*.h" -delete
          find . -type f -name "*.hpp" -delete
          find . -type f -name "*.txt" -delete
          find . -type f -name "*.md" -delete
          find . -type f -name "README*" -delete
          find . -type f -name "LICENSE*" -delete
          find . -type f -name "CHANGELOG*" -delete
          
          # Remove specific large directories
          rm -rf numpy/tests
          rm -rf numpy/doc
          rm -rf langchain/tests
          rm -rf langchain_community/tests
          rm -rf sqlalchemy/testing
          rm -rf sqlalchemy/test
          rm -rf yaml/tests
          rm -rf yaml/examples
          
          # Print size of each directory for debugging
          echo "Package sizes:"
          du -h -d 1 .
          total_size=$(du -s . | cut -f1)
          echo "Total size in KB: $total_size"
          cd ../..

      - name: Create deployment zip file
        run: |
          cd deployment/package
          zip -r ../${{ env.ZIP_FILE_NAME }} .
          cd ..
          # Print zip file size
          echo "Zip file size:"
          ls -lh ${{ env.ZIP_FILE_NAME }}
          cd ..

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_SA_ROLE_ARN }}

      - name: Push zip to S3
        run: |
          aws s3 cp ./deployment/${{ env.ZIP_FILE_NAME }} \
            s3://${{ vars.AWS_S3_BUCKET }}/${{ env.ZIP_FILE_NAME }} \
            --region ${{ vars.AWS_REGION }}

      - name: Update Lambda function
        run: |
          aws lambda update-function-code \
            --function-name ${{ vars.AWS_LAMBDA_FUNCTION }} \
            --s3-bucket ${{ vars.AWS_S3_BUCKET }} \
            --s3-key ${{ env.ZIP_FILE_NAME }} \
            --region ${{ vars.AWS_REGION }} \
            --publish || exit 1
