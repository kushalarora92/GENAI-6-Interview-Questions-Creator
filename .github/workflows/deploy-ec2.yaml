name: Deploy to EC2

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - 'requirements.txt'
      - 'templates/**'
      - 'Dockerfile'

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  EC2_INSTANCE_ID: ${{ vars.EC2_INSTANCE_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_SA_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build and save Docker image
        run: |
          docker build -t ai6-interview-questions:${{ github.sha }} .
          docker save ai6-interview-questions:${{ github.sha }} > image.tar

      - name: Setup SSH and Connect to EC2
        run: |
          # Generate SSH key
          mkdir -p ~/.ssh
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
          
          # Send key to EC2 instance
          aws ec2-instance-connect send-ssh-public-key \
            --instance-id ${{ env.EC2_INSTANCE_ID }} \
            --availability-zone ${{ vars.EC2_AVAILABILITY_ZONE }} \
            --instance-os-user ec2-user \
            --ssh-public-key "$(cat ~/.ssh/id_rsa.pub)"
          
          # Wait for key to be available
          echo "Waiting for SSH key to propagate..."
          sleep 10
          
          # Test SSH connection
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ec2-user@${{ vars.EC2_HOST }} 'echo "SSH connection successful"' || {
            echo "SSH connection failed. Checking instance status..."
            aws ec2 describe-instance-status --instance-id ${{ env.EC2_INSTANCE_ID }}
            exit 1
          }

      - name: Copy Docker image to EC2
        run: |
          # Copy files with retries
          for i in {1..3}; do
            echo "Attempt $i to copy files..."
            scp -o StrictHostKeyChecking=no -o ConnectTimeout=10 image.tar deploy.sh ec2-user@${{ vars.EC2_HOST }}:~/ && break
            sleep 5
          done

      - name: Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ vars.EC2_HOST }} '
            # Load and run the new image
            docker load < image.tar
            bash deploy.sh ${{ github.sha }}
          ' 